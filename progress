Checkpoint 1: Basic instructions
By checkpoint 1, you should have a basic pipeline that can handle ADD, AND, NOT, LDR, STR, and BR instructions.
You do not need to handle any control hazards or data hazards. The test code will contain NOPs to allow the processor to work without hazard detection. For this checkpoint you can use a “magic” memory that always sets mem_resp high immediately so that you don’t have to handle cache misses or memory stalls.
Also, you should provide your mentor TA with an overview of your cache hierarchy (showing how your L1 caches, arbiter, and L2 cache interface with each other) as well as detailed designs for your arbiter and L2 cache.

code:
datapath:
IF
ID
EX
MEM
WB
(Some signal passing through the pipline need to add to EX and ID stage )


control

paper design:
showing how your L1 caches, arbiter, and L2 cache interface with each other
arbiter
L2 cache

----------------------
Current Progress as of 10/23/16
----------------------

Short summary of who did what:

everyone: we worked as a group in the process of designing and drawing the diagram for this MP
Nathan: set up project files, implemented the MP hierarchy with the caches, memory, datapath, etc. Wrote up the control signals for the pipeline registers. Implemented early version of the ex stage.
Sheng: implemented early version of mem, wb, and if stages. Implemented our current decoder. Helped with the multitude of compilation issues (mostly missing and/or unassigned signals).
Colin: implemented id stage. Helped get the project compiling and helped fill out many of the datapath and control signals. Wrote the arbiter. Final debugging and polishing of the MP.
